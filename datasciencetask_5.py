# -*- coding: utf-8 -*-
"""DATASCIENCETASK3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kzP112ps-vgQuelevqgh9i2Gn_zrq9nj

IMPORTING LIBRARIES
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from imblearn.over_sampling import RandomOverSampler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix

"""LOAD AND READ THE DATASET

"""

df = pd.read_csv('/content/creditcard.csv')
df.head()

df.tail()

df.describe()

df.shape

df.info()

df.isna().sum()

df['V20'].fillna(df['V20'].mode()[0], inplace=True)
df['V21'].fillna(df['V21'].mode()[0], inplace=True)
df['V22'].fillna(df['V22'].mode()[0], inplace=True)
df['V23'].fillna(df['V23'].mode()[0], inplace=True)
df['V24'].fillna(df['V24'].mode()[0], inplace=True)
df['V25'].fillna(df['V25'].mode()[0], inplace=True)
df['V26'].fillna(df['V26'].mode()[0], inplace=True)
df['V27'].fillna(df['V27'].mode()[0], inplace=True)
df['V28'].fillna(df['V28'].mode()[0], inplace=True)
df['Amount'].fillna(df['Amount'].mode()[0], inplace=True)
df['Class'].fillna(df['Class'].mode()[0], inplace=True)

df.isna().sum()

"""EDA"""

plt.figure(figsize=(8,6))
sns.countplot(x='Class',data=df)
plt.title("Fraud vs Non- Fraud")
plt.show()

corr_matrix=df.corr()
plt.figure(figsize=(12,10))
sns.heatmap(corr_matrix,cmap='coolwarm',annot=False)
plt.title("Correlation Matrix")
plt.show()

plt.figure(figsize=(8,6))
sns.boxplot(x='Class',y='Amount',data=df)
plt.yscale('log')
plt.title("Box plot for Amount and Class")
plt.show()

plt.figure(figsize=(8,6))
sns.scatterplot(x='Time',y='Amount',hue='Class',data=df,alpha=0.5)
plt.title("Time vs amount")
plt.show()

x=df.drop("Class",axis=1)
y=df['Class']

"""TRAIN AND TEST"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

scaler=StandardScaler()
x_train_scaler=scaler.fit_transform(x_train)
x_test_scaler=scaler.fit_transform(x_test)

ros=RandomOverSampler(random_state=42)
x_train_resampled,y_train_resampled=ros.fit_resample(x_train,y_train)

model=LogisticRegression(random_state=42)
model.fit(x_train_resampled,y_train_resampled)
y_pred=model.predict(x_test)
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))
print("\n classification Report")
print(classification_report(y_test,y_pred))

